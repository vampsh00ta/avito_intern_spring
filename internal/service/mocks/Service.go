// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	models "avito_intern/internal/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// BannerHistoryCleaner provides a mock function with given fields: serviceError, done, limit
func (_m *Service) BannerHistoryCleaner(serviceError chan<- error, done <-chan bool, limit int) {
	_m.Called(serviceError, done, limit)
}

// ChangeBanner provides a mock function with given fields: ctx, ID, banner
func (_m *Service) ChangeBanner(ctx context.Context, ID int, banner models.BannerChange) error {
	ret := _m.Called(ctx, ID, banner)

	if len(ret) == 0 {
		panic("no return value specified for ChangeBanner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, models.BannerChange) error); ok {
		r0 = rf(ctx, ID, banner)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBanner provides a mock function with given fields: ctx, banner
func (_m *Service) CreateBanner(ctx context.Context, banner models.Banner) (int, error) {
	ret := _m.Called(ctx, banner)

	if len(ret) == 0 {
		panic("no return value specified for CreateBanner")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Banner) (int, error)); ok {
		return rf(ctx, banner)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Banner) int); ok {
		r0 = rf(ctx, banner)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Banner) error); ok {
		r1 = rf(ctx, banner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBannerByID provides a mock function with given fields: ctx, ID
func (_m *Service) DeleteBannerByID(ctx context.Context, ID int) error {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBannerByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBannerByTagAndFeature provides a mock function with given fields: ctx, featureID, tagID
func (_m *Service) DeleteBannerByTagAndFeature(ctx context.Context, featureID int32, tagID int32) (int, error) {
	ret := _m.Called(ctx, featureID, tagID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBannerByTagAndFeature")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) (int, error)); ok {
		return rf(ctx, featureID, tagID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) int); ok {
		r0 = rf(ctx, featureID, tagID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, featureID, tagID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBannerForUser provides a mock function with given fields: ctx, userTag, featureID, useLastRevision
func (_m *Service) GetBannerForUser(ctx context.Context, userTag int32, featureID int32, useLastRevision bool) (models.Banner, error) {
	ret := _m.Called(ctx, userTag, featureID, useLastRevision)

	if len(ret) == 0 {
		panic("no return value specified for GetBannerForUser")
	}

	var r0 models.Banner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, bool) (models.Banner, error)); ok {
		return rf(ctx, userTag, featureID, useLastRevision)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, bool) models.Banner); ok {
		r0 = rf(ctx, userTag, featureID, useLastRevision)
	} else {
		r0 = ret.Get(0).(models.Banner)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, bool) error); ok {
		r1 = rf(ctx, userTag, featureID, useLastRevision)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBannerWithHistory provides a mock function with given fields: ctx, bannerID, limit
func (_m *Service) GetBannerWithHistory(ctx context.Context, bannerID int, limit int) ([]models.Banner, error) {
	ret := _m.Called(ctx, bannerID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetBannerWithHistory")
	}

	var r0 []models.Banner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]models.Banner, error)); ok {
		return rf(ctx, bannerID, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []models.Banner); ok {
		r0 = rf(ctx, bannerID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Banner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, bannerID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBanners provides a mock function with given fields: ctx, tagID, featureID, limit, offset
func (_m *Service) GetBanners(ctx context.Context, tagID int32, featureID int32, limit int32, offset int32) ([]models.Banner, error) {
	ret := _m.Called(ctx, tagID, featureID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetBanners")
	}

	var r0 []models.Banner
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, int32, int32) ([]models.Banner, error)); ok {
		return rf(ctx, tagID, featureID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, int32, int32) []models.Banner); ok {
		r0 = rf(ctx, tagID, featureID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Banner)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, int32, int32) error); ok {
		r1 = rf(ctx, tagID, featureID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAdmin provides a mock function with given fields: ctx, token
func (_m *Service) IsAdmin(ctx context.Context, token string) (bool, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for IsAdmin")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsLogged provides a mock function with given fields: ctx, token
func (_m *Service) IsLogged(ctx context.Context, token string) (bool, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for IsLogged")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, username
func (_m *Service) Login(ctx context.Context, username string) (string, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Permission provides a mock function with given fields: ctx, token, groupIDs
func (_m *Service) Permission(ctx context.Context, token string, groupIDs ...int) (bool, error) {
	_va := make([]interface{}, len(groupIDs))
	for _i := range groupIDs {
		_va[_i] = groupIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, token)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Permission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int) (bool, error)); ok {
		return rf(ctx, token, groupIDs...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int) bool); ok {
		r0 = rf(ctx, token, groupIDs...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...int) error); ok {
		r1 = rf(ctx, token, groupIDs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
